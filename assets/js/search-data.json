{
  
    
        "post0": {
            "title": "인기 파이썬 도서 크롤링  ",
            "content": "from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.common.keys import Keys from bs4 import BeautifulSoup import requests url = &#39;http://www.yes24.com/Main/default.aspx&#39; driver = webdriver.Chrome() driver.get(url) elem = driver.find_element(By.ID, &#39;query&#39;) elem.send_keys(&#39;파이썬&#39;) elem = driver.find_element(By.XPATH, &#39;//*[@id=&quot;yesSForm&quot;]/fieldset/span[2]/button&#39;) elem.click() # 데이터 가져오기 soup = BeautifulSoup(driver.page_source, &#39;lxml&#39;) book_list = soup.find(&#39;ul&#39;, attrs={&#39;id&#39;: &#39;yesSchList&#39;}) books = book_list.find_all(&#39;li&#39;) for i, book in enumerate(books) : title = book.find(&#39;a&#39;, attrs={&#39;class&#39; : &#39;gd_name&#39;}) price = book.find(&#39;strong&#39;, attrs={&#39;class&#39; : &#39;txt_num&#39;}) rating = book.select(&#39;span.rating_grade em&#39;) if not rating : continue if float(rating[0].get_text()) &lt; 9.5 : continue print(title.get_text(), price.get_text(), rating[0].get_text()) . Do it! 점프 투 파이썬 16,920원 9.6 혼자 공부하는 머신러닝+딥러닝 23,400원 10.0 이것이 취업을 위한 코딩 테스트다 with 파이썬 30,600원 9.5 Do it! 파이썬 생활 프로그래밍 18,000원 9.5 Do it! 점프 투 파이썬 + Do it! 파이썬 생활 프로그래밍 34,920원 9.6 파이썬 코딩의 기술(개정2판) 28,800원 9.6 모두의 데이터 분석 with 파이썬 16,200원 9.5 Do it! 자료구조와 함께 배우는 알고리즘 입문 : 파이썬 편 19,800원 9.6 Do it! 점프 투 파이썬 + Do it! 자료구조와 함께 배우는 알고리즘 입문 : 파이썬 편 + Do it! 파이썬 생활 프로그래밍 54,720원 9.6 파이썬 머신러닝 완벽 가이드 34,200원 9.5 Do it! 점프 투 파이썬 + Do it! 첫 파이썬 29,520원 9.6 Do it! 첫 파이썬 12,600원 9.7 파이썬 증권 데이터 분석 28,800원 9.6 쉽게 따라 만드는 파이썬 주식 자동매매 시스템 25,200원 9.6 혼자 공부하는 첫 프로그래밍 with 파이썬 15,300원 9.5 밑바닥부터 시작하는 딥러닝 21,600원 9.5 모두의 인공지능 with 파이썬 19,800원 10.0 .",
            "url": "https://suyeonis.github.io/dfdf/%ED%81%AC%EB%A1%A4%EB%A7%81/python/2021/12/08/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EB%8F%84%EC%84%9C%ED%81%AC%EB%A1%A4%EB%A7%81.html",
            "relUrl": "/%ED%81%AC%EB%A1%A4%EB%A7%81/python/2021/12/08/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EB%8F%84%EC%84%9C%ED%81%AC%EB%A1%A4%EB%A7%81.html",
            "date": " • Dec 8, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "멜론사이트 최신곡 검색",
            "content": "1) 멜론 사이트에서 국내 최신곡 10위까지의 정보를 노래제목, 가수, 앨범, 좋아요 수를 출력하시오 . url = &#39;https://www.melon.com/new/index.htm&#39; | . # 가수 : div rank02 # 앨범 : div rank03 # 좋아요 : span cnt import requests from bs4 import BeautifulSoup url =&#39;https://www.melon.com/new/index.htm&#39; headers = {&#39;User-Agent&#39; : &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#39;} response = requests.get(url, headers=headers) response.raise_for_status() soup = BeautifulSoup(response.text, &#39;html.parser&#39;) all_song = soup.find_all(&#39;tr&#39;) for i, song in enumerate(all_song) : #print(song) title = song.find_all(&#39;div&#39;, attrs={&#39;class&#39; : &#39;rank01&#39;}) if len(title) == 0 : continue if i &gt;10 : break title = title[0].a.get_text() print(i, title, end=&#39; &#39;) singer = song.find_all(&#39;div&#39;, attrs={&#39;class&#39; : &#39;rank02&#39;}) singer = singer[0].a.get_text() print(singer, end=&#39; &#39;) album = song.find_all(&#39;div&#39;, attrs={&#39;class&#39; : &#39;rank03&#39;}) album = album[0].a.get_text() print(&#39;, 앨범명:&#39;, album) . 1 소원 지아 , 앨범명: 소원 (3rd MAKE:UP) 2 헤어지면 돼 V.O.S , 앨범명: 헤어지면 돼 3 푸르른 계절도 내겐 의미 없어요 정승환 , 앨범명: 지금, 헤어지는 중입니다 OST Part.4 4 Our Road 로시 (Rothy) , 앨범명: 지리산 OST Part.7 5 0 Her ㅎrl (Feat. nafla) 베이빌론 (Babylon) , 앨범명: 바보 (Feat. nafla) 6 입버릇 진원 , 앨범명: 입버릇 7 12345 저드 (jerd) , 앨범명: A.M.P. 8 Imagine Love 미연 ((여자)아이들) , 앨범명: 어른 연습생 OST Part 2 9 Guardian (Feat. 김아름) 스페이스카우보이 (SPACECOWBOY) , 앨범명: Guardian 10 애.정.너 (Indecisive Me) 종한 (JONGHAN) , 앨범명: 애.정.너 (Indecisive Me) . 2) 네이버에서 bts이미지를 검색한 후 나온 결과 중 5개의 이미지를 저장 . url = &#39;https://search.naver.com/search.naver?where=image&amp;sm=tab_jum&amp;query=bts&#39; | . import os import time import requests from bs4 import BeautifulSoup from selenium import webdriver driver = webdriver.Chrome() url =&#39;https://search.naver.com/search.naver?sm=tab_hty.top&amp;where=image&amp;query=itzy+&amp;oquery=itzy+%EB%A5%98%EC%A7%84&amp;tqi=hiUQMdp0YiRsskjKihGsssssstd-024376&#39; headers = {&#39;User-Agent&#39; : &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#39;} # 셀레늄을 이용하여 특정 사이트로 이동한 후 1초동안 대기 driver.get(url) time.sleep(1) # response = requests.get(url, headers=headers) # response.raise_for_status() #driver.get했기 때문에 이건 사용x soup = BeautifulSoup(driver.page_source) #파서 필요없음 itzy_imgs = soup.find_all(&#39;img&#39;,attrs={&#39;class&#39;:&#39;_image _listImage&#39;}) print(&#39;그림의 개수:&#39;,len(itzy_imgs))#첫 화면에 보이는 이미지의 개수(스크롤하면 더 많이 보임) # 이미지 저장할 폴더 생성 img_dir = &#39;./itzy_img/&#39; if not os.path.exists(img_dir): #디렉토리가 없으면 생성 os.makedirs(img_dir) print(&#39;폴더 생성&#39;) else: print(&#39;폴더가 생성됨&#39;) for i, image in enumerate(itzy_imgs): img_url = image[&#39;src&#39;] if(not img_url.startswith(&#39;http&#39;)):continue img_src = requests.get(img_url, headers=headers) img_src.raise_for_status() with open(img_dir+&#39;itzy_{}.jpg&#39;.format(i),&#39;wb&#39;) as f: #처음 http가 아니면 잘 저장이 안될수있음 f.write(img_src.content) if i&gt;=10: break print(&#39;itzy 사진 저장 완료&#39;) # print(soup) # with open(&#39;itzy.html&#39;,&#39;w&#39;,encoding=&#39;utf8&#39;) as f: # f.write(response.text) # print(&#39;저장 완료&#39;) #파일 확인해보기 . 그림의 개수: 50 폴더가 생성됨 itzy 사진 저장 완료 . pip show selenium . chorome://version chromedriver 검색-&gt; 자신의 크롬 프로그램 버전에 맞는 driver을 다운로드 받는다. 화면 제어 . temp = &#39;http://www.naver.com&#39; temp1 = &#39;http://www.daum.net&#39; print(temp.startswith(&#39;http&#39;)) print(temp1.startswith(&#39;http&#39;)) print(temp.endswith(&#39;com&#39;)) print(temp1.endswith(&#39;com&#39;)) . True True True False .",
            "url": "https://suyeonis.github.io/dfdf/%ED%81%AC%EB%A1%A4%EB%A7%81/python/2021/12/08/%EB%A9%9C%EB%A1%A0%ED%81%AC%EB%A1%A4%EB%A7%81.html",
            "relUrl": "/%ED%81%AC%EB%A1%A4%EB%A7%81/python/2021/12/08/%EB%A9%9C%EB%A1%A0%ED%81%AC%EB%A1%A4%EB%A7%81.html",
            "date": " • Dec 8, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://suyeonis.github.io/dfdf/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://suyeonis.github.io/dfdf/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://suyeonis.github.io/dfdf/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://suyeonis.github.io/dfdf/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}